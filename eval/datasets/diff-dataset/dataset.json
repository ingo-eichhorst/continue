{
  "name": "unified-diff-demo-dataset",
  "description": "Demo dataset for testing unified diff generation and application",
  "version": "1.0.0",
  "metadata": {
    "language": "javascript",
    "difficulty": "easy",
    "tags": ["functions", "classes", "error-handling", "refactoring"],
    "createdAt": "2024-01-01T00:00:00Z",
    "modifiedAt": "2024-01-01T00:00:00Z"
  },
  "testCases": [
    {
      "id": "test-001",
      "name": "Add error handling to simple function",
      "description": "Test adding try-catch error handling to a basic arithmetic function",
      "input": {
        "prompt": "Add error handling to the function",
        "sourceCode": "function calculate(a, b) {\n  return a + b;\n}",
        "modificationPrompt": "Add try-catch error handling to this function that catches any errors and returns null"
      },
      "expected": {
        "diffShouldApply": true,
        "expectedChanges": ["try", "catch"]
      },
      "metadata": {
        "language": "javascript",
        "difficulty": "easy"
      }
    },
    {
      "id": "test-002", 
      "name": "Add JSDoc comments to function",
      "description": "Test adding documentation comments to a function",
      "input": {
        "prompt": "Add JSDoc documentation to the function",
        "sourceCode": "function multiply(x, y) {\n  return x * y;\n}",
        "modificationPrompt": "Add proper JSDoc comments to document this function's parameters and return value"
      },
      "expected": {
        "diffShouldApply": true,
        "expectedChanges": ["/**", "@param", "@returns"]
      },
      "metadata": {
        "language": "javascript",
        "difficulty": "easy"
      }
    },
    {
      "id": "test-003",
      "name": "Add method to class",
      "description": "Test adding a new method to an existing class",
      "input": {
        "prompt": "Add a method to the class",
        "sourceCode": "class Calculator {\n  constructor() {\n    this.result = 0;\n  }\n\n  add(value) {\n    this.result += value;\n    return this;\n  }\n}",
        "modificationPrompt": "Add a subtract method that subtracts a value from the result and returns this for chaining"
      },
      "expected": {
        "diffShouldApply": true,
        "expectedChanges": ["subtract", "this.result -=", "return this"]
      },
      "metadata": {
        "language": "javascript",
        "difficulty": "medium"
      }
    },
    {
      "id": "test-004",
      "name": "Fix variable declaration",
      "description": "Test changing var to const for immutable variable",
      "input": {
        "prompt": "Fix variable declaration",
        "sourceCode": "function greet(name) {\n  var message = 'Hello, ' + name + '!';\n  return message;\n}",
        "modificationPrompt": "Change the var declaration to const since the message variable is not reassigned"
      },
      "expected": {
        "diffShouldApply": true,
        "expectedChanges": ["const message"]
      },
      "metadata": {
        "language": "javascript",
        "difficulty": "easy"
      }
    },
    {
      "id": "test-005",
      "name": "Add input validation",
      "description": "Test adding parameter validation to a function",
      "input": {
        "prompt": "Add input validation",
        "sourceCode": "function divide(a, b) {\n  return a / b;\n}",
        "modificationPrompt": "Add validation to check that both parameters are numbers and b is not zero, throw appropriate errors"
      },
      "expected": {
        "diffShouldApply": true,
        "expectedChanges": ["typeof", "throw", "Error"]
      },
      "metadata": {
        "language": "javascript",
        "difficulty": "medium"
      }
    },
    {
      "id": "test-006",
      "name": "Convert to arrow function",
      "description": "Test converting a regular function to arrow function syntax",
      "input": {
        "prompt": "Convert to arrow function",
        "sourceCode": "const numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map(function(n) {\n  return n * 2;\n});",
        "modificationPrompt": "Convert the anonymous function to arrow function syntax"
      },
      "expected": {
        "diffShouldApply": true,
        "expectedChanges": ["=>"]
      },
      "metadata": {
        "language": "javascript",
        "difficulty": "easy"
      }
    },
    {
      "id": "test-007",
      "name": "Add default parameter",
      "description": "Test adding a default parameter value",
      "input": {
        "prompt": "Add default parameter",
        "sourceCode": "function createUser(name, role) {\n  return {\n    name: name,\n    role: role || 'user'\n  };\n}",
        "modificationPrompt": "Replace the logical OR with a default parameter value for role"
      },
      "expected": {
        "diffShouldApply": true,
        "expectedChanges": ["role = 'user'"]
      },
      "metadata": {
        "language": "javascript",
        "difficulty": "easy"
      }
    },
    {
      "id": "test-008",
      "name": "Add async/await",
      "description": "Test converting Promise.then to async/await",
      "input": {
        "prompt": "Convert to async/await",
        "sourceCode": "function fetchData() {\n  return fetch('/api/data')\n    .then(response => response.json())\n    .then(data => data.items);\n}",
        "modificationPrompt": "Convert this function to use async/await syntax instead of Promise chains"
      },
      "expected": {
        "diffShouldApply": true,
        "expectedChanges": ["async", "await"]
      },
      "metadata": {
        "language": "javascript",
        "difficulty": "medium"
      }
    },
    {
      "id": "test-009",
      "name": "Add getter method",
      "description": "Test adding a getter method to a class",
      "input": {
        "prompt": "Add getter method",
        "sourceCode": "class Circle {\n  constructor(radius) {\n    this.radius = radius;\n  }\n}",
        "modificationPrompt": "Add a getter method called 'area' that calculates and returns the area of the circle (π * radius²)"
      },
      "expected": {
        "diffShouldApply": true,
        "expectedChanges": ["get area", "Math.PI", "this.radius"]
      },
      "metadata": {
        "language": "javascript",
        "difficulty": "medium"
      }
    },
    {
      "id": "test-010",
      "name": "Fix indentation",
      "description": "Test fixing inconsistent indentation",
      "input": {
        "prompt": "Fix indentation",
        "sourceCode": "function example() {\n    if (true) {\n      console.log('hello');\n  } else {\n        console.log('world');\n    }\n}",
        "modificationPrompt": "Fix the inconsistent indentation to use 2 spaces consistently"
      },
      "expected": {
        "diffShouldApply": true
      },
      "metadata": {
        "language": "javascript",
        "difficulty": "easy"
      }
    }
  ]
}